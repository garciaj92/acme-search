{"version":3,"sources":["assets/people-outline.svg","assets/email.svg","assets/phone.svg","assets/file.svg","assets/slack-hash.svg","assets/message-circle.svg","assets/twitter.svg","services/query-service.js","services/service.js","constants/index.js","utils/analytics-util.js","utils/date-util.js","utils/index.js","services/calendar-service.js","services/contact-service.js","services/dropbox-service.js","services/slack-service.js","services/main-service.js","services/tweet-service.js","services/index.js","components/search-bar/index.js","components/search-bar/search-bar.js","components/search-card/search-card.js","components/search-card/index.js","components/subcomponents/date-info/date-info.js","components/subcomponents/date-info/index.js","components/subcomponents/guests-info/guests-info.js","components/subcomponents/guests-info/index.js","components/styled-components/card-heading/card-heading.js","components/styled-components/card-heading/index.js","components/subcomponents/calendar-card/calendar-card.js","components/subcomponents/calendar-card/index.js","components/styled-components/list-container/list-container.js","components/styled-components/list-container/index.js","components/styled-components/list-heading/list-heading.js","components/styled-components/list-heading/index.js","components/wrappers/array-conditional-wrapper/array-conditional-wrapper.js","components/wrappers/array-conditional-wrapper/index.js","components/calendar-list/calendar-list.js","components/calendar-list/index.js","components/styled-components/card-icon-subheading/card-icon-subheading.js","components/styled-components/card-icon-subheading/index.js","components/styled-components/card-link/card-link.js","components/styled-components/card-link/index.js","components/subcomponents/email-info/email-info.js","components/subcomponents/email-info/index.js","components/subcomponents/phone-info/phone-info.js","components/subcomponents/phone-info/index.js","components/styled-components/card-subheading/card-subheading.js","components/styled-components/card-subheading/index.js","components/subcomponents/contact-card/contact-card.js","components/subcomponents/contact-card/index.js","components/contact-list/contact-list.js","components/contact-list/index.js","components/subcomponents/path-info/path-info.js","components/subcomponents/path-info/index.js","components/subcomponents/shared-with-info/shared-with-info.js","components/subcomponents/shared-with-info/index.js","components/subcomponents/dropbox-card/dropbox-card.js","components/subcomponents/dropbox-card/index.js","components/dropbox-list/dropbox-list.js","components/dropbox-list/index.js","components/styled-components/card-info/card-info.js","components/styled-components/card-info/index.js","components/subcomponents/slack-card/slack-card.js","components/subcomponents/slack-card/index.js","components/slack-list/slack-list.js","components/slack-list/index.js","components/subcomponents/tweet-card/tweet-card.js","components/subcomponents/tweet-card/index.js","components/tweet-list/tweet-list.js","components/tweet-list/index.js","components/search-results/search-results.js","components/search-results/index.js","components/app/index.js","components/app/app.js","serviceWorker.js","index.js"],"names":["module","exports","queryStr","trim","length","trimmedLowercaseQuery","toLocaleLowerCase","queryTerms","split","Set","data","query","Array","isArray","matching_terms","term","includes","Service","this","filtered","filter","element","queryService","queryMatch","TRACKER_NAME","TRACKING_ID","debugMode","gaOptions","name","CONSTANTS","titleCase","debug","cookieDomain","ReactGA","initialize","pageview","window","location","pathname","search","performance","timing","category","variable","value","now","label","actionMsg","event","action","process","createDateStr","date","Date","isNaN","toLocaleDateString","toLocaleTimeString","Object","freeze","analytics","normalize","calendar","map","id","title","invitees","invitee","utils","contacts","contact","company","emails","phones","lastContact","last_contact","documents","document","path","sharedWith","shared_with","created","dropbox","messages","msg","channel","author","message","createdAt","timestamp","slack","services","tweet","tweets","user","String","replace","res","keys","service","getMatching","main","SearchBar","props","state","hover","onFormSubmit","bind","onChange","onHover","e","preventDefault","onSearch","prepareQuery","setState","submitEvent","target","prevState","Container","fluid","className","Form","onSubmit","Group","onMouseEnter","onMouseLeave","Control","type","Button","variant","React","Component","SearchCard","children","Card","bg","border","Body","DateInfo","GuestsInfo","Image","src","peopleOutlineIconSrc","width","idx","Badge","pill","key","CardHeading","heading","CalendarCard","Footer","ListHeading","ListContainer","ArrayConditionalWrapper","array","propTypes","PropTypes","oneOfType","arrayOf","isRequired","any","CalendarList","ListGroup","as","Item","CardIconSubHeading","iconSrc","CardLink","href","content","onClick","startsWith","callEvent","mailEvent","clickEvent","EmailInfo","emailIcon","email","PhoneInfo","phoneIcon","phone","CardSubHeading","ContactCard","ContactList","PathInfo","fileIcon","SharedWithInfo","DropboxCard","DropboxList","CardInfo","SlackCard","slackHashIcon","messageCircleIcon","SlackList","TweetCard","twitterIcon","TweetList","SearchResults","results","App","init","externalLibLoadTime","appMountTime","appUsageTime","getSearchResults","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.87f6b2df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/people-outline.54b44710.svg\";","module.exports = __webpack_public_path__ + \"static/media/email.6367b939.svg\";","module.exports = __webpack_public_path__ + \"static/media/phone.9648114a.svg\";","module.exports = __webpack_public_path__ + \"static/media/file.1ff296c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/slack-hash.99c580ba.svg\";","module.exports = __webpack_public_path__ + \"static/media/message-circle.d7f24300.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.a1aa34d6.svg\";","\nclass QueryService {\n    prepareQuery(queryStr) {\n        if (!queryStr \n            || typeof queryStr !== \"string\"\n            || queryStr.trim().length === 0) {\n            return null;\n        }\n        \n        const trimmedLowercaseQuery = queryStr.trim().toLocaleLowerCase();\n        const queryTerms = trimmedLowercaseQuery.split(\" \");\n        \n        // Removes any repeating query terms\n        const preppedQuery = [...new Set([trimmedLowercaseQuery, ...queryTerms])];\n\n        return preppedQuery;\n    }\n\n    queryMatch(data, query) {\n        if (query\n              && data\n              && Array.isArray(query)\n              && Array.isArray(data.matching_terms)) {\n            for (let term of query) {\n                if (data.matching_terms.includes(term)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n\nexport default new QueryService();","import queryService from \"./query-service\";\n\nclass Service {\n    constructor(data) {\n        this.data = data || [];\n    }\n\n    getMatching(query) {\n        let filtered = [];\n        if (Array.isArray(query) && query.length > 0) {\n            filtered = this.data.filter(element => (\n                queryService.queryMatch(element, query)\n            ));\n        }\n        return filtered;\n    }\n}\n\nexport default Service;","export default {\n    ANALYTICS: {\n        TRACKER_NAME: \"acme-search-tracker\",\n        TRACKING_ID: \"UA-177849447-1\"\n    }\n};","import ReactGA from \"react-ga\";\nimport CONSTANTS from \"../constants\";\n\nclass Analytics {\n    constructor(debugMode = false) {\n        this.debugMode = debugMode\n    }\n\n    // Analytics initializer\n    init() {\n        const gaOptions = {\n            name: CONSTANTS.ANALYTICS.TRACKER_NAME,\n            titleCase: false,\n        };\n\n        if (this.debugMode)  {\n            gaOptions.debug = true;\n            gaOptions.cookieDomain = \"none\";\n        }\n        \n        ReactGA.initialize(CONSTANTS.ANALYTICS.TRACKING_ID, gaOptions);\n        ReactGA.pageview(\n            window.location.pathname + window.location.search || \"/\"\n        );\n    }\n\n    // Timing functions\n    appMountTime() {\n        if (window.performance) {\n            ReactGA.timing({\n                category: \"app mount timing\",\n                variable: \"mount\",\n                value: window.performance.now(),\n                label: \"app mount time\"\n            });\n        }\n    }\n\n    appUsageTime() {\n        if (window.performance) {\n            ReactGA.timing({\n                category: \"app usage timing\",\n                variable: \"usage\",\n                value: window.performance.now(),\n                label: \"app usage time\"\n            });\n        }\n    }\n\n    externalLibLoadTime() {\n        if (window.performance) {\n            ReactGA.timing({\n                category: \"external libraries load timing\",\n                variable: \"load\",\n                value: window.performance.now(),\n                label: \"external libraries load time\"\n            });\n        }\n    }\n\n    // Events\n    callEvent(actionMsg) {\n        ReactGA.event({\n            category: \"call\",\n            action: actionMsg || \"user call\"\n        });\n    }\n\n    clickEvent(actionMsg) {\n        ReactGA.event({\n            category: \"click\",\n            action: actionMsg || \"user click\"\n        });\n    }\n\n    submitEvent(actionMsg) {\n        ReactGA.event({\n            category: \"submit\",\n            action: actionMsg || \"user submit\"\n        });\n    }\n\n    mailEvent(actionMsg) {\n        ReactGA.event({\n            category: \"mail\",\n            action: actionMsg || \"user mail\"\n        });\n    }\n}\n\nexport default new Analytics(process.env.NODE_ENV === \"development\");","function createDateStr(date) {\n    if (date instanceof Date && !isNaN(date)) {\n        return `${date.toLocaleDateString()} - ${date.toLocaleTimeString()}`\n    }\n    return \"- Unknown -\";\n}\n\nexport default {\n    createDateStr\n};","import analytics from \"./analytics-util\";\nimport date from \"./date-util\";\n\nexport default Object.freeze({\n    analytics,\n    date\n});","import Service from \"./service\";\nimport utils from \"../utils\";\n\n// JSON Date\nimport data from \"../data/calendar.json\";\n\n/** \n    Calendar Schema: [\n        {\n            \"id\": String,\n            \"title\": String,\n            \"invitees\": String,\n            \"matching_terms\": [String],\n            \"date\": Date\n        },\n    ]\n*/\nclass CalendarService extends Service {\n    getMatching(query) {\n        let filtered = super.getMatching(query);\n        return this.normalize(filtered);\n    }\n\n    normalize(calendar) {\n        return calendar.map(event => {\n            return {\n                id: event.id,\n                title: event.title,\n                invitees: event.invitees.trim().split(\",\").map(invitee => invitee.trim()),\n                date: utils.date.createDateStr(new Date(event.date)),\n            };\n        });\n    }\n}\n\nexport default new CalendarService(data.calendar);","import Service from \"./service\";\n\n// Utilities\nimport utils from \"../utils\";\n\n// JSON data\nimport data from \"../data/contacts.json\";\n\n/** \n    Contact Schema: [\n        {\n            \"id\": String,\n            \"name\": String,\n            \"company\": String,\n            \"emails\": [String],\n            \"phones\": [String],\n            \"matching_terms\": [String],\n            \"last_contact\": Date\n        },\n    ]\n*/\nclass ContactService extends Service {\n    getMatching(query) {\n        let filtered = super.getMatching(query);\n        return this.normalize(filtered);\n    }\n\n    normalize(contacts) {\n        return contacts.map(contact => {\n            return {\n                id: contact.id,\n                name: contact.name,\n                company: contact.company,\n                emails: contact.emails,\n                phones: contact.phones,\n                lastContact: utils.date.createDateStr(new Date(contact.last_contact)),\n            };\n        });\n    }\n}\n\nexport default new ContactService(data.contacts);","import Service from \"./service\";\n\n// Utilities\nimport utils from \"../utils\";\n\n// JSON data\nimport data from \"../data/dropbox.json\";\n\n/** \n    Dropbox Schema: [\n        {\n            \"id\": String,\n            \"path\": String,\n            \"title\": String,\n            \"shared_with\": [String],\n            \"matching_terms\": [String],\n            created\": Date\n        },\n    ]\n*/\nclass DropboxService extends Service {\n    getMatching(query) {\n        let filtered = super.getMatching(query);\n        return this.normalize(filtered);\n    }\n\n    normalize(documents) {\n        return documents.map(document => {\n            return {\n                id: document.id,\n                title: document.title,\n                path: document.path,\n                sharedWith: document.shared_with,\n                created: utils.date.createDateStr(new Date(document.created)),\n            };\n        });\n    }\n}\n\nexport default new DropboxService(data.dropbox);","import Service from \"./service\";\n\n// Utilities\nimport utils from \"../utils\";\n\n// JSON data\nimport data from \"../data/slack.json\";\n\n/** \n    Slack Schema: [\n        {\n            \"id\": String,\n            \"channel\": String,\n            \"author\": String,\n            \"message\": String,\n            \"timestamp\": Date,\n            \"matching_terms\": [String],\n        },\n    ]\n*/\nclass SlackService extends Service {\n    getMatching(query) {\n        let filtered = super.getMatching(query);\n        return this.normalize(filtered);\n    }\n\n    normalize(messages) {\n        return messages.map(msg => ({\n            channel: msg.channel,\n            author: msg.author,\n            message: msg.message,\n            createdAt: utils.date.createDateStr(new Date(msg.timestamp))\n        }))\n    }\n}\n\nexport default new SlackService(data.slack);","import calendar from \"./calendar-service\";\nimport contact from \"./contact-service\";\nimport dropbox from \"./dropbox-service\";\nimport slack from \"./slack-service\";\nimport tweet from \"./tweet-service\";\n\n// Services can be easily expanded\nconst services = {\n    calendar,\n    contact,\n    dropbox,\n    slack,\n    tweet\n};\n\nclass MainService {\n    constructor(services) {\n        this.services = services;\n    }\n    getSearchResults(query) {\n        let res = {};\n        for (let service of Object.keys(this.services)) {\n            res[service] = this.services[service].getMatching(query);\n        }\n        return res;\n    }\n}\n\nexport default new MainService(services);","import Service from \"./service\";\n\n// Utilities\nimport utils from \"../utils\";\n\n// Data\nimport data from \"../data/tweet.json\";\n\n/** \n    Tweet Schema: [\n        {\n            \"user\": String,\n            \"message\": String,\n            \"timestamp\": Date,\n            \"matching_terms\": [String]\n        },\n    ]\n*/\n\nclass TweetService extends Service {\n    getMatching(query) {\n        let filtered = super.getMatching(query);\n        return this.normalize(filtered);\n    }\n\n    normalize(tweets) {\n        return tweets.map(tweet => {\n            return {\n                user: String(tweet.user).replace(\"@\", \"\"),\n                message: String(tweet.message),\n                createdAt: utils.date.createDateStr(new Date(tweet.timestamp)),\n            };\n        });\n    }\n}\n\nexport default new TweetService(data.tweet);","import query from \"./query-service\";\nimport main from \"./main-service\";\n\nexport default Object.freeze({\n    query,\n    main\n});","import SearchBar from \"./search-bar\";\n\nexport default SearchBar;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styled components\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\n\n// Services\nimport services from \"../../services\";\n\n// Utilities\nimport utils from \"../../utils\";\n\n// CSS styles\nimport \"./search-bar.css\";\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: \"\",\n            hover: false\n        }\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onHover = this.onHover.bind(this);\n    }\n\n    onFormSubmit(e) {\n        e.preventDefault();\n        const { query } = this.state;\n        this.props.onSearch( services.query.prepareQuery(query) );\n        this.setState({ query: \"\" });\n\n        // Tracks form submission\n        utils.analytics.submitEvent(\"search submit\");\n    }\n\n    onChange(e) {\n        this.setState( { [e.target.name]: e.target.value } );\n    }\n    \n    onHover() {\n        this.setState( prevState => ({ hover: !prevState.hover }) );\n    }\n\n    render() {\n        return (\n            <Container fluid className=\"p-3 text-center text-dark\">\n                <h1 className=\"display-4 font-weight-lighter\">Acme Search</h1>\n                <Form \n                    className={\"mx-auto d-flex border rounded-pill\" + (this.state.hover ? \" shadow\": \"\")}\n                    onSubmit={this.onFormSubmit}\n                 >\n                    <Form.Group\n                        className=\"flex-fill mx-3\"\n                        onMouseEnter={this.onHover}\n                        onMouseLeave={this.onHover}\n                    >\n                        <Form.Control\n                            className=\"w-100 border-0\"\n                            type=\"text\"\n                            name=\"query\"\n                            onChange={this.onChange}\n                            value={this.state.query}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n                    <Button className=\"rounded-pill\" type=\"submit\" variant=\"outline-info\">Search</Button>\n                </Form>\n            </Container>\n        );\n    }\n};\n\nSearchBar.propTypes = {\n    onSearch: PropTypes.func.isRequired\n};\n\nexport default SearchBar;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styled components\nimport Card from \"react-bootstrap/Card\";\n\nfunction SearchCard({ children, ...props }) {\n  return (\n        <Card className=\"shadow\" bg=\"white\" border=\"info\" { ...props } >\n          <Card.Body>{children}</Card.Body>\n        </Card>\n  );\n}\n\nSearchCard.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.element),\n    PropTypes.element\n  ])\n};\n\nexport default SearchCard;\n","import SearchCard from \"./search-card\";\n\nexport default SearchCard;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction DateInfo({ title, date, ...props }) {\n   return (\n       <div className=\"text-muted\" {...props} >\n           <h5 className=\"font-weight-bold mb-0\">{title}</h5>\n           <p className=\"font-weight-bold mb-0\">{date}</p>\n       </div>\n   )\n}\n\nDateInfo.propTypes = {\n    title: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n};\n\nexport default DateInfo;","import DateInfo from \"./date-info\";\n\nexport default DateInfo;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styled components\nimport Badge from \"react-bootstrap/Badge\";\nimport Image from \"react-bootstrap/Image\";\n\n// SVG Icons\nimport peopleOutlineIconSrc from \"../../../assets/people-outline.svg\";\n\nfunction GuestsInfo({ invitees }) {\n    return (\n        <>\n            <div className=\"d-flex justify-content-center align-items-center my-2\">\n                <Image src={peopleOutlineIconSrc} width={30} /><h5 className=\"mb-0 ml-1\">{invitees.length} invited</h5>\n            </div>\n            <div className=\"d-flex flex-wrap justify-content-center\">\n                {invitees.map((invitee, idx) => <Badge pill key={idx} variant=\"info\" className=\"m-1\">{invitee}</Badge>)}\n            </div>\n        </>\n    );\n}\n\nGuestsInfo.propTypes = {\n    invitees: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default GuestsInfo;","import GuestsInfo from \"./guests-info\";\n\nexport default GuestsInfo;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction CardHeading( { heading } ) {\n    return (\n        <h4 className=\"font-weight-bold\">{heading}</h4>\n    );\n}\n\nCardHeading.propTypes = { \n    heading: PropTypes.string.isRequired\n};\n\nexport default CardHeading;","import CardHeading from \"./card-heading\";\n\nexport default CardHeading;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Subcomponents\nimport DateInfo from \"../date-info\";\nimport GuestsInfo from \"../guests-info\";\n\n// Styled components\nimport Card from \"react-bootstrap/Card\";\nimport CardHeading from \"../../styled-components/card-heading\";\n\nfunction CalendarCard({title, invitees, date, ...props}) {\n    return (\n        <Card { ...props } className=\"shadow calendar-card\" bg=\"white\">\n            <Card.Body>\n                <CardHeading heading={title} />\n                { invitees && <GuestsInfo invitees={invitees} />}\n            </Card.Body>\n            <Card.Footer className=\"bg-white\"><DateInfo title={\"Time & Date\"} date={date} /></Card.Footer>\n        </Card>\n    );\n}\n\nCalendarCard.propTypes = {\n    title: PropTypes.string.isRequired,\n    invitees: PropTypes.arrayOf(PropTypes.string),\n    date: PropTypes.string.isRequired\n};\n\nexport default CalendarCard;","import CalendarCard from \"./calendar-card\";\n\nexport default CalendarCard;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction ListHeading( { children } ) {\n    return (\n        <section className=\"py-3\">\n            { children }\n        </section>\n    );\n}\n\nListHeading.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.element),\n        PropTypes.element,\n    ]).isRequired\n}\n\nexport default ListHeading;","import ListContainer from \"./list-container\";\n\nexport default ListContainer;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction ListHeading( { heading } ) {\n    return (\n        <h1 className=\"font-weight-bold\">{heading}</h1>\n    );\n}\n\nListHeading.propTypes = {\n    heading: PropTypes.string.isRequired\n}\n\nexport default ListHeading;","import ListHeading from \"./list-heading\";\n\nexport default ListHeading;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction ArrayConditionalWrapper({ children, array }) {\n    if (Array.isArray(array) && array.length > 0) {\n        return (\n            <>\n                {children}\n            </>\n        );\n    } else {\n        return null;\n    }\n}\n\nArrayConditionalWrapper.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.element),\n        PropTypes.element\n    ]).isRequired,\n    array: PropTypes.arrayOf(PropTypes.any).isRequired,\n}\n\nexport default ArrayConditionalWrapper;","import ArrayConditionalWrapper from \"./array-conditional-wrapper\";\n\nexport default ArrayConditionalWrapper;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Subcomponents\nimport CalendarCard from \"../subcomponents/calendar-card\";\n\n// Styled components\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListContainer from \"../styled-components/list-container\";\nimport ListHeading from \"../styled-components/list-heading\";\n\n// Wrapper components\nimport ArrayConditionalWrapper from \"../wrappers/array-conditional-wrapper\";\n\nfunction CalendarList({ calendar }) {\n    return (\n        <ArrayConditionalWrapper array={calendar}>\n            <ListContainer>\n                <ListHeading heading={\"Calendar\"} />\n                <ListGroup as=\"ul\">\n                    {calendar.map( (event, idx) => (\n                            <ListGroup.Item as=\"li\" key={idx}>\n                                <CalendarCard \n                                    title={event.title}\n                                    invitees={event.invitees}\n                                    date={event.date}\n                                />\n                            </ListGroup.Item>\n                        )\n                    )}\n                </ListGroup>\n            </ListContainer>\n        </ArrayConditionalWrapper>\n    );\n}\n\nCalendarList.propTypes = {\n    calendar: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        invitees: PropTypes.arrayOf(PropTypes.string),\n        date: PropTypes.string.isRequired,\n    }))\n};\n\nexport default CalendarList;","import CalendarList from \"./calendar-list\";\n\nexport default CalendarList;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styled components\nimport Image from \"react-bootstrap/Image\";\n\nfunction CardIconSubHeading( { iconSrc, heading } ) {\n    return (\n        <div className=\"d-flex justify-content-center align-items-center my-2\">\n            <Image src={iconSrc} width={30} />\n            <h5 className=\"mb-0 mx-1\">{heading}</h5>\n        </div>\n    );\n}\n\nCardIconSubHeading.propTypes = {\n    iconSrc: PropTypes.string.isRequired,\n    heading: PropTypes.string.isRequired\n};\n\nexport default CardIconSubHeading;","import CardIconSubHeading from \"./card-icon-subheading\";\n\nexport default CardIconSubHeading;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Utilities\nimport utils from \"../../../utils\";\n\nfunction CardLink( { href, content, ...props } ) {\n    function trackClick(e) {\n        if (process.env.NODE_ENV === \"development\") {\n            e.preventDefault();\n        }\n        const { href } = e.target;\n        if (href.startsWith(\"tel\")) {\n            utils.analytics.callEvent(`user calling ${href.split(\":\")[1]}`);\n        } else if (href.startsWith(\"mailto\")){\n            utils.analytics.mailEvent('user clicked email address');\n        } else {\n            utils.analytics.clickEvent(`user clicked link ${href}`);\n        }\n    }\n\n    if (href) {\n        return <a href={href} className=\"text-muted mb-0 d-block\" onClick={trackClick} { ...props }>{content}</a>\n    } else {\n        return <p className=\"text-muted mb-0 d-block\" { ...props }>{content}</p>\n    }\n}\n\nCardLink.propTypes = {\n    content: PropTypes.string.isRequired,\n    href: PropTypes.string\n};\n\nexport default CardLink;","import CardLink from \"./card-link\";\n\nexport default CardLink;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styled components\nimport CardIconSubHeading from \"../../styled-components/card-icon-subheading\";\nimport CardLink from \"../../styled-components/card-link\";\n\n// SVG Icons\nimport emailIcon from \"../../../assets/email.svg\";\n\nfunction EmailInfo({ emails, ...props }) {\n    return (\n        Array.isArray(emails) && (\n            <div className=\"d-sm-inline-block align-baseline-top m-3\" {...props}>\n                <CardIconSubHeading\n                    iconSrc={emailIcon} \n                    heading={emails.length > 1 ? \"Emails\" : \"Email\"} \n                />\n                {emails.map( (email, idx) => (\n                    <CardLink key={idx} href={`mailto:${email}`} content={email} />\n                ))}\n            </div>\n        )\n    );\n }\n\n EmailInfo.propTypes = {\n    emails: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default EmailInfo;","import EmailInfo from \"./email-info\";\n\nexport default EmailInfo;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styled components\nimport CardIconSubHeading from \"../../styled-components/card-icon-subheading\";\nimport CardLink from \"../../styled-components/card-link\";\n\n// SVG Icons\nimport phoneIcon from \"../../../assets/phone.svg\";\n\nfunction PhoneInfo({ phones, ...props }) {\n    return (\n        Array.isArray(phones) && (\n            <div className=\"d-sm-inline-block align-baseline-top mx-3\" {...props}>\n                <CardIconSubHeading\n                    iconSrc={phoneIcon} \n                    heading={phones.length > 1 ? \"Emails\" : \"Email\"} \n                />\n                {phones.map( (phone, idx) => (\n                    <CardLink key={idx} href={`tel:${phone}`} content={phone} />\n                ))}\n            </div>\n        )\n    );\n }\n\n PhoneInfo.propTypes = {\n    phones: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nexport default PhoneInfo;","import PhoneInfo from \"./phone-info\";\n\nexport default PhoneInfo;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction CardSubHeading( { heading } ) {\n    return (\n        <h5 className=\"text-muted mb-0\">{heading}</h5>\n    );\n}\n\nCardSubHeading.propTypes = {\n    heading: PropTypes.string.isRequired\n}\n\nexport default CardSubHeading;","import CardSubHeading from \"./card-subheading\";\n\nexport default CardSubHeading;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Subcomponents\nimport DateInfo from \"../date-info\";\nimport EmailInfo from \"../email-info\";\nimport PhoneInfo from \"../phone-info\";\n\n// Styled components\nimport Card from \"react-bootstrap/Card\";\nimport CardHeading from \"../../styled-components/card-heading\";\nimport CardSubHeading from \"../../styled-components/card-subheading\";\n\n/* Contact Schema {\n        \"name\": String,\n        \"company\": String,\n        \"emails\": [String],\n        \"phones\": [String],\n        \"lastContact\": String\n    }\n */\n\nfunction ContactCard({name, company, emails, phones, lastContact, ...props}) {\n    return (\n        <Card { ...props } className=\"shadow\" bg=\"white\">\n            <Card.Body>\n                <CardHeading heading={name} />\n                {company && <CardSubHeading heading={company} />}\n                {emails && <EmailInfo emails={emails} />}\n                {phones && <PhoneInfo phones={phones} />}\n            </Card.Body>\n            <Card.Footer className=\"bg-white\">{lastContact\n                ? <DateInfo title={\"Last Contacted\"} date={lastContact} />\n                : <p className=\"text-muted\">You have never contacted {name}.</p>}</Card.Footer>\n        </Card>\n    );\n}\n\nContactCard.propTypes = {\n    name: PropTypes.string.isRequired,\n    company: PropTypes.string,\n    emails: PropTypes.arrayOf(PropTypes.string),\n    phones: PropTypes.arrayOf(PropTypes.string),\n    lastContact: PropTypes.string\n};\n\nexport default ContactCard;","import ContactCard from \"./contact-card\";\n\nexport default ContactCard;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Subcomponents\nimport ContactCard from \"../subcomponents/contact-card\";\n\n// Styled components\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListContainer from \"../styled-components/list-container\";\nimport ListHeading from \"../styled-components/list-heading\";\n\n// Wrapper components\nimport ArrayConditionalWrapper from \"../wrappers/array-conditional-wrapper\";\n\nfunction ContactList({ contacts }) {\n    return (\n        <ArrayConditionalWrapper array={contacts}>\n            <ListContainer>\n                <ListHeading heading={\"Contacts\"} />\n                <ListGroup as=\"ul\">\n                    {contacts.map( contact => (\n                            <ListGroup.Item as=\"li\" key={contact.id}>\n                                <ContactCard \n                                    name={contact.name}\n                                    company={contact.company}\n                                    emails={contact.emails}\n                                    phones={contact.phones}\n                                    lastContact={contact.lastContact}\n                                />\n                            </ListGroup.Item>\n                        )\n                    )}\n                </ListGroup>\n            </ListContainer>\n        </ArrayConditionalWrapper>\n    );\n}\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.string,\n        name: PropTypes.string.isRequired,\n        company: PropTypes.string.isRequired,\n        emails: PropTypes.arrayOf(PropTypes.string),\n        phones: PropTypes.arrayOf(PropTypes.string),\n        lastContact: PropTypes.string.isRequired,\n    }))\n};\n\nexport default ContactList;","import ContactList from \"./contact-list\";\n\nexport default ContactList;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styled components\nimport CardIconSubHeading from \"../../styled-components/card-icon-subheading\";\nimport CardLink from \"../../styled-components/card-link\";\n\n// SVG Icons\nimport fileIcon from \"../../../assets/file.svg\";\n\nfunction PathInfo({ path }) {\n    return (\n        <>\n            <CardIconSubHeading iconSrc={fileIcon} heading={\"Path\"} />\n            <CardLink content={path} />\n        </> \n    );\n}\n\nPathInfo.propTypes = {\n    path: PropTypes.string.isRequired\n};\n\nexport default PathInfo;","import PathInfo from \"./path-info\";\n\nexport default PathInfo;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styled components\nimport CardIconSubHeading from \"../../styled-components/card-icon-subheading\";\nimport CardLink from \"../../styled-components/card-link\";\n\n// SVG Icons\nimport peopleOutlineIconSrc from \"../../../assets/people-outline.svg\";\n\nfunction SharedWithInfo({ emails }) {\n    return (\n        Array.isArray(emails) && (\n            <>\n                <CardIconSubHeading iconSrc={peopleOutlineIconSrc} heading={\"Shared with\"} />\n                <div className=\"d-flex flex-wrap justify-content-center\">\n                    {emails.length < 1 \n                        ? <p className=\"text-muted\"> No one</p>\n                        : emails.map((email, idx) => <CardLink key={idx} href={`mailto:${email}`} content={email} />)}\n                </div>\n            </>\n        )\n    );\n}\n\nSharedWithInfo.propTypes = {\n    emails: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default SharedWithInfo;","import SharedWithInfo from \"./shared-with-info\";\n\nexport default SharedWithInfo;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Subcomponents\nimport DateInfo from \"../date-info\";\nimport PathInfo from \"../path-info\";\nimport SharedWithInfo from \"../shared-with-info\";\n\n// Styled components\nimport Card from \"react-bootstrap/Card\";\nimport CardHeading from \"../../styled-components/card-heading\";\n\nfunction DropboxCard({title, path, sharedWith, created, ...props}) {\n    return (\n        <Card { ...props } className=\"shadow calendar-card\" bg=\"white\">\n            <Card.Body>\n                <CardHeading heading={title}/>\n                <PathInfo path={path} />\n                { sharedWith && <SharedWithInfo emails={sharedWith} />}\n            </Card.Body>\n            <Card.Footer className=\"bg-white\"><DateInfo title={\"Created\"} date={created} /></Card.Footer>\n        </Card>\n    );\n}\n\nDropboxCard.propTypes = {\n    title: PropTypes.string.isRequired,\n    path: PropTypes.string.isRequired,\n    created: PropTypes.string.isRequired,\n    sharedWith: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default DropboxCard;","import DropboxCard from \"./dropbox-card\";\n\nexport default DropboxCard;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Subcomponents\nimport DropboxCard from \"../subcomponents/dropbox-card\";\n\n// Styled components\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListContainer from \"../styled-components/list-container\";\nimport ListHeading from \"../styled-components/list-heading\";\n\n// Wrapper components\nimport ArrayConditionalWrapper from \"../wrappers/array-conditional-wrapper\";\n\nfunction DropboxList({ documents }) {\n    return (\n        <ArrayConditionalWrapper array={documents}>\n            <ListContainer>\n            <ListHeading heading={\"Dropbox\"} />\n                <ListGroup as=\"ul\">\n                    {documents.map( (document, idx) => (\n                            <ListGroup.Item as=\"li\" key={idx}>\n                                <DropboxCard \n                                    title={document.title}\n                                    path={document.path}\n                                    sharedWith={document.sharedWith}\n                                    created={document.created}\n                                />\n                            </ListGroup.Item>\n                        )\n                    )}\n                </ListGroup>\n            </ListContainer>\n        </ArrayConditionalWrapper>\n        );\n}\n\nDropboxList.propTypes = {\n    documents: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        path: PropTypes.string.isRequired,\n        sharedWith: PropTypes.arrayOf(PropTypes.string),\n        created: PropTypes.string.isRequired,\n    }))\n};\n\nexport default DropboxList;","import DropboxList from \"./dropbox-list\";\n\nexport default DropboxList;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styled components\nimport CardIconSubHeading from \"../card-icon-subheading\";\nimport CardLink from \"../card-link\";\n\nfunction CardInfo({ iconSrc, heading, href, content }) {\n    return (\n        <>\n            <CardIconSubHeading iconSrc={iconSrc} heading={heading} />\n            <CardLink href={href} content={content} />\n        </> \n    );\n}\n\nCardInfo.propTypes = {\n    iconSrc: PropTypes.string.isRequired,\n    heading: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n    href: PropTypes.string\n};\n\nexport default CardInfo;","import CardInfo from \"./card-info\";\n\nexport default CardInfo;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Subcomponents\nimport DateInfo from \"../date-info\";\n\n// Styled components\nimport Card from \"react-bootstrap/Card\";\nimport CardInfo from \"../../styled-components/card-info\";\nimport CardHeading from \"../../styled-components/card-heading\";\n\n// SVG icons\nimport slackHashIcon from \"../../../assets/slack-hash.svg\";\nimport messageCircleIcon from \"../../../assets/message-circle.svg\";\n\nfunction SlackCard( { channel, author, message, createdAt, ...props } ) {\n    return (\n        <Card className=\"shadow calendar-card\" bg=\"white\" { ...props }>\n            <Card.Body>\n                <CardHeading heading={author} />\n                <CardInfo \n                    iconSrc={slackHashIcon}\n                    heading={\"Channel\"}\n                    content={channel}\n                />\n                <CardInfo\n                    iconSrc={messageCircleIcon}\n                    heading={\"Message\"}\n                    content={message}\n                />\n            </Card.Body>\n            <Card.Footer className=\"bg-white\">\n                <DateInfo title={\"Sent\"} date={createdAt} />\n            </Card.Footer>\n        </Card>\n    );\n}\n\nSlackCard.propTypes = {\n    channel: PropTypes.string.isRequired,\n    author: PropTypes.string.isRequired,\n    message: PropTypes.string.isRequired,\n    createdAt: PropTypes.string.isRequired,\n};\n\nexport default SlackCard;","import SlackCard from \"./slack-card\";\n\nexport default SlackCard;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Subcomponents\nimport SlackCard from \"../subcomponents/slack-card\";\n\n// Styled components\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListContainer from \"../styled-components/list-container\";\nimport ListHeading from \"../styled-components/list-heading\";\n\n// Wrapper components\nimport ArrayConditionalWrapper from \"../wrappers/array-conditional-wrapper\";\n\nfunction SlackList({ messages }) {\n    return (\n        <ArrayConditionalWrapper array={messages}>\n            <ListContainer>\n                <ListHeading heading={\"Slack\"} />\n                <ListGroup as=\"ul\">\n                    {messages.map( (message, idx) => (\n                            <ListGroup.Item as=\"li\" key={idx}>\n                                <SlackCard \n                                    author={message.author}\n                                    channel={message.channel}\n                                    message={message.message}\n                                    createdAt={message.createdAt}\n                                />\n                            </ListGroup.Item>\n                        )\n                    )}\n                </ListGroup>\n            </ListContainer>\n        </ArrayConditionalWrapper>\n    );\n}\n\nSlackList.propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.exact({\n        author: PropTypes.string.isRequired,\n        channel: PropTypes.string.isRequired,\n        message: PropTypes.string.isRequired,\n        createdAt: PropTypes.string.isRequired,\n    }))\n};\n\nexport default SlackList;","import SlackList from \"./slack-list\";\n\nexport default SlackList;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Subcomponents\nimport DateInfo from \"../date-info\";\n\n// Styled components\nimport Card from \"react-bootstrap/Card\";\nimport CardInfo from \"../../styled-components/card-info\";\nimport CardHeading from \"../../styled-components/card-heading\";\n\n// SVG icons\nimport twitterIcon from \"../../../assets/twitter.svg\";\n\nfunction SlackCard( { user, message, createdAt, ...props } ) {\n    return (\n        <Card className=\"shadow calendar-card\" bg=\"white\" { ...props }>\n            <Card.Body>\n                <CardHeading heading={user} />\n                <CardInfo \n                    iconSrc={twitterIcon}\n                    heading={\"Message\"}\n                    content={message}\n                />\n            </Card.Body>\n            <Card.Footer className=\"bg-white\">\n                { <DateInfo title={\"Tweeted\"} date={createdAt} /> }\n            </Card.Footer>\n        </Card>\n    );\n}\n\nSlackCard.propTypes = {\n    user: PropTypes.string.isRequired,\n    message: PropTypes.string.isRequired,\n    createdAt: PropTypes.string.isRequired,\n};\n\nexport default SlackCard;","import TweetCard from \"./tweet-card\";\n\nexport default TweetCard;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Subcomponents\nimport TweetCard from \"../subcomponents/tweet-card\";\n\n// Styled components\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListContainer from \"../styled-components/list-container\";\nimport ListHeading from \"../styled-components/list-heading\";\n\n// Wrapper components\nimport ArrayConditionalWrapper from \"../wrappers/array-conditional-wrapper\";\n\nfunction TweetList({ tweets }) {\n    return (\n        <ArrayConditionalWrapper array={tweets}>\n            <ListContainer>\n                <ListHeading heading={\"Tweets\"} />\n                <ListGroup as=\"ul\">\n                    {tweets.map( (tweet, idx) => (\n                            <ListGroup.Item as=\"li\" key={idx}>\n                                <TweetCard \n                                    user={tweet.user}\n                                    message={tweet.message}\n                                    createdAt={tweet.createdAt}\n                                />\n                            </ListGroup.Item>\n                        )\n                    )}\n                </ListGroup>\n            </ListContainer>\n        </ArrayConditionalWrapper>\n    );\n}\n\nTweetList.propTypes = {\n    tweets: PropTypes.arrayOf(PropTypes.exact({\n        user: PropTypes.string.isRequired,\n        message: PropTypes.string.isRequired,\n        createdAt: PropTypes.string.isRequired,\n    }))\n};\n\nexport default TweetList;","import TweetList from \"./tweet-list\";\n\nexport default TweetList;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport CalendarList from \"../calendar-list\";\nimport ContactList from \"../contact-list\";\nimport DropboxList from \"../dropbox-list\";\nimport SlackList from \"../slack-list\";\nimport TweetList from \"../tweet-list\";\n\n// CSS styles\nimport \"./search-resutls.css\";\n\nfunction SearchResults({ results, ...props }) {\n    if (results) {\n        return (\n            <section className=\"results mx-auto text-center\" {...props}>\n                <CalendarList calendar={results.calendar} />\n                <ContactList contacts={results.contact} />\n                <DropboxList documents={results.dropbox} />\n                <SlackList messages={results.slack} />\n                <TweetList tweets={results.tweet} />\n            </section>\n        );\n    } else {\n        return null;\n    }\n}\n\nSearchResults.propTypes = {\n    results: PropTypes.object,\n};\n\nexport default SearchResults;","import SearchResults from \"./search-results\";\n\nexport default SearchResults;","import App from \"./app\";\n\nexport default App;","import React from 'react';\n\n// Components\nimport SearchBar from \"../search-bar\";\nimport SearchCard from \"../search-card\";\nimport SearchResults from \"../search-results\";\n\n// Services\nimport services from \"../../services\";\n\n// Utilities\nimport utils from \"../../utils\";\n\n// CSS styles\nimport \"./app.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { results: null }\n    this.onSearch = this.onSearch.bind(this);\n\n    utils.analytics.init();\n    utils.analytics.externalLibLoadTime();\n  }\n\n  componentDidMount() {\n    // Tracks the time it takes our app to mount\n    utils.analytics.appMountTime();\n  }\n\n  componentWillUnmount() {\n    // Tracks the time a user has spent on the app\n    utils.analytics.appUsageTime();\n  }\n\n  onSearch(query) {\n    if (query) {\n      this.setState({\n        results: services.main.getSearchResults(query)\n      });\n    }\n  }\n\n  render() {\n    return (\n      <main className=\"p-3\">\n        <SearchCard>\n          <SearchBar onSearch={this.onSearch} />\n          <SearchResults results={this.state.results} />\n        </SearchCard>\n      </main>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}